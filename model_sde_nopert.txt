functions {
  vector gLV_sde(real[] x, int N, vector mu, vector Md, vector M) {
     // Model: f(x) = mu + M x
     
     vector[N] f;
     
     int countM = 1;
     
     for(i in 1:N){
        f[i] = mu[i] - Md[i]*x[i];
        
        for(j in 1:N){
            if ( i != j ){
                f[i] += M[countM]*x[j];
                countM += 1; 
                //print("loop iteration: ", i, j, countM);
             }
         }
     }
     
     return f;
  }

}

data {
  int<lower=1> N;
  int<lower=1> T;
  
  array[T,N] real x;
  array[T] real times;
  array[T,N] int xmiss;
  
  real tau0;
  //real sigma;
}

parameters {
  vector<lower=0>[N]  mu;
  vector<lower=0>[N]  Md;
  vector[N*N - N]     M;

  vector<lower=0>[N*N - N]  lambda;
  real<lower=0>  tau;
  
  real<lower=0>  sigma;
}

model {
  
  // mu
  target += lognormal_lpdf(mu | 0.01, 0.5);
  
  // Md 
  target += normal_lpdf(Md | 0.1, 0.05);
  
  // Mij: Horsehoe prior
  target += cauchy_lpdf(tau | 0, tau0);

  for(i in 1:(N*(N-1))){
        target += normal_lpdf(M[i] | 0, lambda[i]*tau);
        target += cauchy_lpdf(lambda[i] | 0, 1);
  }
  //

  // sigma
  target += lognormal_lpdf(sigma | 0.01, 0.5);

  // SDE likelihood
  // log xi(t+1) ~ N( log xi(t) + f(x)dt,  )

  for (t in 2:T) {
      vector[N] f_x = gLV_sde(x[t,:], N, mu, Md, M);
      real dt = times[t] - times[t-1];
      
      for (s in 1:N){
         target += normal_lpdf(x[t,s] | x[t-1,s] + f_x[s]*dt, sqrt(dt)*sigma);
      }
  }
  // tmp
}